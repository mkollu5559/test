import sys
import os
import pytest
from unittest.mock import patch, MagicMock

# Add your lambda module path


from lambda_function import trigger_table_schema_glue_job


@patch("lambda_function.glueClient")
@patch("lambda_function.audit_table_insert")
def test_trigger_table_schema_glue_job(mock_audit_insert, mock_glue_client):
    # Arrange
    mock_glue_client.start_job_run.return_value = {
        'JobRunId': 'jr-123456789'
    }

    # Act
    trigger_table_schema_glue_job(
        source_db="test_db",
        source_table="test_table",
        lob="finance",
        data_domain="core"
    )

    # Assert glueClient.start_job_run called with expected args
    mock_glue_client.start_job_run.assert_called_once()
    args, kwargs = mock_glue_client.start_job_run.call_args

    assert kwargs["JobName"]  # should exist
    assert kwargs["Arguments"]["--DATABASE_NAME"] == "test_db"
    assert kwargs["Arguments"]["--TABLE_NAME"] == "test_table"

    # Assert audit_table_insert was called with the JobRunId and other info
    mock_audit_insert.assert_called_once()
    audit_args = mock_audit_insert.call_args[0]
    assert audit_args[0] == "jr-123456789"  # JobRunId
    assert audit_args[1] == "finance"       # LOB
    assert audit_args[2] == "test_db"
    assert audit_args[3] == "test_table"
